<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Quick Start" id="Quick-Start">

  <p>
    DynamORM makes it easy to get up and running with Dynamodb.
  </p>
  <p>
    In this guide we will create a table in Dynamodb table named <code>Users</code> then perform CRUD
    operations on it.
  </p>
  <chapter title="Installation" id="installation">
    <code-block lang="bash">
      npm install dynamorm
    </code-block>
  </chapter>

  <chapter title="Database Setup" id="database-setup">
    <procedure>
      <step>
        Define an Entity <code>user.entity.ts</code>
        <code-block lang="typescript">
          import { Entity, attribute } from 'dynamorm';

          export class UserEntity extends Entity {
            @attribute()
            firstName: string;

            @attribute()
            lastName: string;

            @attribute()
            email: string;
          }
        </code-block>
      </step>
      <step>
        Define a Table <code>users.table.ts</code>
        <code-block lang="typescript">
          import { Table, table } from 'dynamorm';
          import UserEntity from './user.entity';

          @table({
            name: 'Users',
            primaryKey: {pk: 'email'},
            entity: [UserEntity]
          })
          export class UsersTable extends Table {}
        </code-block>
      </step>

      <step>
        Define IoC Container <code>db.container.ts</code>
        <code-block lang="typescript">
          import { DynamoDBClient} from '@aws-sdk/client-dynamodb';
          import { dynamorm } from 'dynamorm';

          @dynamorm({
            client: new DynamoDBClient(),
            tables: [UsersTable],
          })
          export default class Container {}
        </code-block>
      </step>
    </procedure>
  </chapter>

  <chapter title="Create Dynamodb Table" id="create-table">
    <p>With the database setup we can create a migration script to create our <code>Users</code>  Dynamodb table </p>
    <procedure>
      <step>
        Create migration script <code>migration.ts</code>
        <code-block lang="typescript">
          import { DynamormFactor } from 'dynamorm';
          import Container from './db.container';

          const db = DynamoFactory.create(container);

          db.createTables()
            .then(() => console.log('tables created'))
            .catch(e) {
              console.log(e);
            }
        </code-block>
      </step>
      <step>
        Run migration script
        <code-block lang="bash">
          npx ts-node ./migration.ts
        </code-block>
      </step>
      <p>That's it! <code>Users</code> table should be created in your default AWS environment.</p>
    </procedure>
  </chapter>

  <chapter title="What you've learned" id="what-learned">
    <p>Summarize what the reader achieved by completing this tutorial.</p>
  </chapter>

  <seealso>
    <!--Give some related links to how-to articles-->
  </seealso>
</topic>
